"""
Django settings for vlabsServer project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""


import os
import datetime
import yaml

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, PosixGroupType

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if os.getenv('DJANGO_ENV') == 'docker-production':   
    config = yaml.safe_load(os.path.join(os.path.dirname(BASE_DIR), 'vlabsServer', 'vlabsServer/settings.prod.yml'))
else:
    yml_settings = open(os.path.join(os.path.dirname(BASE_DIR), 'vlabsServer', 'vlabsServer/settings.dev.yml'))
    config = yaml.safe_load(yml_settings)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['security']['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config['security']['DEBUG']

# DOCKER = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #external Apps
    'corsheaders',
    'rest_framework',
    'guardian',
    'django_filters',
    #'constance',

    #project Apps
    'api',
    'cohort',
    'course',
    'lab',
    'virtualLab',
    'virlHost',
    'simulation',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vlabsServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vlabsServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config['database']['ENGINE'],
        'NAME': config['database']['NAME'],
        'USER': config['database']['USER'],
        'PASSWORD': config['database']['PASSWORD'],
        'HOST': config['database']['HOST']
    }
}




# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = config['security']['TIME_ZONE']

USE_I18N = True

USE_L10N = True

USE_TZ = True

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}


JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=240*60),
    'JWT_ALLOW_REFRESH': True,
    'JWT_RESPONSE_PAYLOAD_HANDLER':'api.utils.jwt_response_payload_handler',
}

LOGIN_REDIRECT_URL = '/'
# LOGIN_URL = '/api/auth/login'
LOGOUT_REDIRECT_URL ="/"



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
DEFAULT_FILE_STORAGE = config['media-storage']['DEFAULT_FILE_STORAGE']
SFTP_STORAGE_HOST = '10.0.146.60'
SFTP_STORAGE_PARAMS = config['media-storage']['SFTP_STORAGE_PARAMS']
SFTP_STORAGE_ROOT = config['media-storage']['SFTP_STORAGE_ROOT']

SFTP_STORAGE_INTERACTIVE = config['media-storage']['SFTP_STORAGE_INTERACTIVE']


MEDIA_ROOT = config['media-storage']['MEDIA_ROOT']
MEDIA_URL = config['media-storage']['MEDIA_ROOT']

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static/"),)
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static_root')


#AUTH SETTINGS
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    'django_auth_ldap.backend.LDAPBackend',

)

#CORS SETTINGS
CORS_ORIGIN_ALLOW_ALL = True

#DJANGO-LDAP SETTINGS
main_dn = 'dc=inwk,dc=dal,dc=ca'
groups_dn = 'ou=groups,'+main_dn
users_dn = 'ou=users,'+main_dn

#CORE DJANGO-AUTH-LDAP SETTINGS
AUTH_LDAP_SERVER_URI = config['ldap']['AUTH_LDAP_SERVER_URI']
AUTH_LDAP_BIND_DN = 'cn=admin,'+main_dn
AUTH_LDAP_BIND_PASSWORD = config['ldap']['AUTH_LDAP_BIND_PASSWORD']
AUTH_LDAP_USER_SEARCH = LDAPSearch(users_dn, ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName",
                           "last_name": "sn",
                           "email": "mail"
                           }

AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_staff": "cn=staff,"+ groups_dn,
    "is_superuser": "cn=webAdmin," + groups_dn

}

AUTH_LDAP_PROFILE_ATTR_MAP = {"home_directory": "homeDirectory"}

AUTH_LDAP_MIRROR_GROUPS = True
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_GROUP_TYPE = PosixGroupType()
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(groups_dn, ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)")


#CONSTANCE SETTINGS
# CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
#
# CONSTANCE_CONFIG = {
#     'SIMULATION_PER_SERVER': (1, 'The number of simulation hosted on a VIRL server', int),
# }

# LABS_PER_VIRL = 3
